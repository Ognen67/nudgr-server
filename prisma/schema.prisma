generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  goals        Goal[]
  tasks        Task[]
  profile      UserProfile?
  subscription Subscription?
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences Json?
  patterns    Json?
  personality Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  completed     Boolean   @default(false)
  priority      Priority  @default(MEDIUM)
  estimatedTime Int?
  aiGenerated   Boolean   @default(false)
  dueDate       DateTime?
  completedAt   DateTime?
  userId        String
  goalId        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  goal          Goal?     @relation(fields: [goalId], references: [id])
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          String   @id @default(cuid())
  title       String
  description String?
  priority    Priority @default(MEDIUM)
  category    String?
  icon        String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  stripeCustomerId     String             @unique
  stripeSubscriptionId String?            @unique
  stripePriceId        String?
  status               SubscriptionStatus
  currentPeriodEnd     DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_
  UNPAID
}
